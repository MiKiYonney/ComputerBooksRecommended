【推荐理由】：
	Sun 公司核心技术丛书:Effective Java(第2版)》内容全面，结构清晰，讲解详细。可作为技术人员的参考用书。编码平添乐趣，程序更加完美，高效成为习惯，工作如此轻松。你是否正在寻找一本能够更加深入地了解Java编程语言的书，以便编写出更清晰、更正确、更健壮且更易于重用的代码。不用找了！《Sun 公司核心技术丛书:Effective Java中文版(第2版)》为我们带来了共78条程序员必备的经验法则，针对你每天都会遇到的编程问题提出了最有效、最实用的解决方案。
	这本经典Jolt获奖作品实属众望所归。作者对新版进行了彻底的更新。涵盖了自第l版之后所引入的Java E5和Java SE 6的特性，同时开发了新的设计模式和语言习惯用法，介绍了如何充分利用从泛型到枚举、从注解到自动装箱的各种特性。
	每一章都包含几个“条目”，以简洁的形式呈现，自成独立的短文，它们提出了具体的建议，对于Java平台精妙之处的独到见解，以及优秀的代码范例。每个条目的综合描述和解释都阐明了应该怎么做，不应该怎么做，以及为什么。
	
【作者简介】：
	（美国）Joshua Bloch
	Joshua Bloch，是Google公司的首席Java架构师。是Jolt大奖的获得者。他曾是Sun公司的杰出工程师，和Transarc公司的高级系统设计师。Bloch曾带领团队设计和实现过无数的Java平台特性，包括JDK 5.0语言增强版和获奖的Java Collections Framework。他的著作还包括：《Java Puzzlers》、《Java Concurrency in Practive》等。
【书籍介绍】：
	如果有一个同事这样对你说，“我的配偶今天晚上在家里制造了一顿不同寻常的晚餐，你愿意来参加吗？”（Spouse of me this night today manufactures the unusual meal in a home．You will join?）这时候你脑子里可能会浮现起三件事情：第一，满脑子的疑惑；第二，英语肯定不是这位同事的母语；第三，同事是在邀请你参加他的家庭晚宴。
	如果你曾经学习过第二种语言，并且尝试过在课堂之外使用这种语言，你就该知道有三件事情是必须掌握的：这门语言的结构如何（语法），如何命名你想谈论的事物（词汇），以及如何以惯用和高效的方式来表达日常的事物（用法）。在课堂上大多只涉及前面两点，当你使出浑身解数想让对方明白你的意思时，常常会发现当地人对你的表述忍俊不禁。
	程序设计语言也是如此。你需要理解语言的核心：它是面向算法的，还是面向函数的，或者是面向对象的？你需要知道词汇表：标准类库提供了哪些数据结构、操作和功能（Facility）？你还需要熟悉如何用习惯和高效的方式来构建代码。关于程序设计语言的书籍通常只是涉及前面两点，或者只是蜻蜓点水般地介绍一下用法。也许是因为前面两点比较容易编写。语法和词汇是语言本身固有的特性，但是，用法则反映了使用这门语言的群体的特征。
	例如，Java程序设计语言是一门支持单继承的面向对象程序设计语言，在每个方法的内部，它也支持命令式的（面向语句的，statement-Oriented）编码风格。Java类库提供了对图形显示、网络、分布式计算和安全性的支持。但是，如何把这门语言以最佳的方式运用到实践中呢？
	还有一点：程序与口语中的句子以及大多数书籍和杂志都不同，它会随着时间的推移而发生变化。仅仅编写出能够有效地工作并且能够被别人理解的代码往往是不够的，我们还必须把代码组织成易于修改的形式。针对某个任务可能会有10种不同的编码方法，而在这10种方法中，有7种方法是笨拙的、低效的或者是难以理解的。而在剩下的3种编码方法中，哪一种会是最接近该任务的下一年度发行版本的代码呢？
	目前有大量的书籍可以供你学习Java程序设计语言的语法，包括《he Java Programming Language》[Arnold05]（作者Amold、Gosling和Holmes），以及《The Java Language Specification》[JLS]（作者Gosling、Joy和Bracha）。同样，与Java程序设计语言相关的类库租API的书籍也不少。
	本书讲解了全新的泛型、枚举、注解、自动装箱、fof-each循环、可变参数、并发机制，等等。经典主题的全新技术和最佳实践，包括对象．类、类库、方法和序列化。如何避免Java编程语言中常被误解的细微之处：陷阱和缺陷。
	本书解决了你的第三种需求：习惯和高效的用法。作者Joshua Bloch在Sun公司多年来一直从事Java语言的扩展、实现和使用的工作；他还大量地阅读了其他人的代码，包括我的代码。他在本书中提出了许多很好的建议，他系统地把这些建议组织起来，旨在告诉读者如何更好地构造代码以便它们能工作得更好，也便于其他人能够理解这些代码，便于将来对代码进行修改和改善的时候不至于那么头疼。甚至，你的程序也会因此而变得更加令人愉悦、更加优美和雅致。
	第1章 引言
	第2章 创建和销毁对象
	第3章 对于所有对象都通用的方法
	第4章 类和接口
	第5章 泛型
	第6章 枚举和注解
	第7章 方法
	第8章 通用程序设计
	第9章 异常
	第10章 并发
	第11章 序列化

【读书体会】：
	如果你使用刚刚学会的Java做了一个小应用程序，那么你就可以开始有选择地看这本书。书中分别对Java的不同特性分章节给予作者本人的建议。如果你还没有用到其中的某一特性，那么就没必要读相关的章节，跳过去。只有你经历过了，摔倒过了，困扰过了，你才会与书中的建议产生共鸣。每做完一个工程后或者编码期间，就可以多次重读，加深自己的理解，并了解新的建议。必要时对现有的程序重写。
	如果你没一定java经验的话先不要看了，因为看了可能没多少的帮助，或者很快就会遗忘。千万也不要急功近利，因为如果我一年多前看了这本书，我觉得不会有现在那么大收获。因为书中的例子写得并不简单，而就算写得再简单，也没有自己在使用过程中的体会而感受更深刻。自己的经验体会，大于一切。 
　　所以觉得这本应该定义是一本进阶的书。 
	拿我自己举例，java编程经验3年。底层功夫问心其实不怎么扎实，可能一直过于依赖框架的关系。而看这本书的时候跳过了一些，只是单纯的略过，例如，并发和序列化两章。接触得少，也可以说没什么经验，所以看了也不明白多少。 
	但如果你想成为一个高级程序员，至少你要记得78条规则。不是把整本书记住，只是知道规则大概的用意。看完这本书，也许你还会有另外收获，就是把一些使用IDE时的习惯找到了他们的依据。 
　　很多规则，读这书之前并不知道的，但可能你一直就是这么做了，也许你会惊讶。但是其实这些都是IDE在无形的帮助我们养成良好的习惯而努力。因为他会通过各种警告提示我们。如果你有很好的信任IDE的话，你将养成了不少好习惯。 
　　例如，使用泛型安全机制，命名法则，重载标记，序列化中的UID等。可见IDE作者们的用心良苦，尽最大努力的辅助我们标准化。 
　　经典之作，十分推荐各位朋友看一下。当然了，有条件的朋友希望直接看英文版好了，最近人民邮电出版社也出了本影印版，可谓福音。 
　　 