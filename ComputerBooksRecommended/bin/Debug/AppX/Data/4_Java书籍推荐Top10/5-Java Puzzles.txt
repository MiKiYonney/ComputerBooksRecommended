【推荐理由】：
	《Java解惑》：Effective Java作者又一力作，实例讲授Java中令人迷惑和不易掌握的知识点，寓教于乐，妙趣横生。
	你认为自己了解Java多少？你是个爱琢磨的代码侦探吗？你是否曾经花费数天时间去追踪一个Java或其类库的陷阱和缺陷而导致的bug？你喜欢智力测验吗？《Java解惑》正好适合你！
	Bloch和Gafter继承了Effective Java一书的传统。深入研究了Java编程语言及其核心类库的细微之处。《Java解惑》特写T95个噩梦般的谜题，中间穿插着许多有趣的视觉幻象。寓教于乐。任何具备Java知识的人都可以理解这些谜题，但甚至是最老练的程序员也会觉得它们具有挑战性。
	多数的谜题都是些小程序，其行为诡秘。不可貌相。你能指出它们会做什么吗？根据这些谜题用到的特性以及各题的详细解惑方案。我们将其松散地分成了几个部分。这些解惑方案超越了对程序行为的简单解释，向你展示了如何一劳永逸地避免底层的陷阱与缺陷。《Java解惑》最后列出了一些常见的陷阱和缺陷，可供读者参考。
	一旦你解决了这些谜题，那些曾经愚弄过最具经验的Java程序员的隐晦且有违直觉的语言行为，将再也无法把你骗过。
	
【作者简介】：
	作者：（美国）布洛克（Joshua Bloch） （美国）加夫特（Neal Gafter） 译者：陈昊鹏
	Joshua Bloch，Google公司的首席工程师。著有Jolt大奖作品Effective Java Programming Language Guide。他之前是Sun公司的杰出工程师和Transarc公司的资深系统设计师。Bloch领导了大量的Java平台特性的设计与实现工作。包括JDK 5.0中的语言改进和获奖的Java集合框架。他拥有卡耐基-梅隆大学计算机科学专业的博士学位。
	Neal Gafter现任微软架构师。曾任Google公司的软件工程师，还曾是Sun公司的资深工程师，领导了Java编译器的开发工作，并且实现了Java 1.4版至5.0版的许多语言特性。Gafter曾经是C++标准委员会的成员，他在Sun、Microtec Research和Texas Instrument时领导了C和C++编译器的开发工作。他拥有罗彻斯特大学计算机科学专业的博士学位。
【书籍介绍】：
	与许多书一样，本书经历了长期的酝酿过程。我们收集Java谜题的时间与我们使用Java平台的时间一样长：如果你感兴趣的话，可以告诉你是从1996年年中开始的。在2001年年初，我们产生了一个想法：搞一次完全涉及Java谜题的演讲。我们把这个想法抛给了当时还在Oracle公司的Larry Jacobs，他完全同意。
	2001年11月，我们于旧金山举办的Oracle Open World会议上首次作了题为“Java谜题”的演讲。为了增添魅力，我们介绍自己是“Type-it兄弟，Click和Hack”，并且从Tom和Ray Magliozzi主持的Cair Talk节目中借用了一大堆笑话…。这个演讲被评选为最佳演讲秀，也许我们不投自己的票，结果可能也如此。由此，我们知道找对了路子。
	一身蓝领工人利落的制服，胸前别着Java的“咖啡杯”标志，我们在Java One 2002上再次利用Oracle会议上的演讲来鼓吹我们的观点——至少我们的朋友是这么认为的。在接下来的几年里，我们又作了另外三次“Java谜题”的演讲，并且在数不胜数的会议、公司和大学里宣讲它们，足迹遍及全球许多城市，从奥斯陆到东京。这些演讲受到普遍欢迎，起码没人冲我们扔烂苹果。在Linux Magazine的2003年3月刊上，我们发表了一篇完全由Java谜题构成的文章，没有收到任何厌恶我们的邮件。本书几乎包含了我们的演讲和文章中的所有谜题，以及许多其他的谜题。
	尽管本书集中关注Java平台的陷阱和缺陷，但我们并没有诋毁Java之意。我们热爱Java，并将近10年的职业生涯都奉献给了它。每一种具有强大能力的平台都会有某些问题，Java与大多数平台相比已经算少的了。你对问题理解得越透彻，就越不会受到它们的影响，这正是本书要达到的目的。
	书中的多数谜题都是一些短程序，它们看起来是在“明修栈道”，实际却是“暗渡陈仓”。这就是我们选择视觉幻图来装饰本书的原因。这些幻图看起来是某样事物，但实际上却是另一样东西。在你努力思考这些程序到底在做什么的时候，可以盯着这些幻图好好看看。
	我们希望本书能具有趣味性，真诚地希望你能够尽情享受解惑的乐趣，就如同我们享受编写它们的乐趣一样，还希望你能够从中学到很多东西，如我们曾经的那样。
	第1章 绪论1
	第2章 表达式之谜5
	第3章 字符之谜25
	第4章 循环之谜53
	第5章 异常之谜77
	第6章 类之谜105
	第7章 库之谜131
	第8章 更多类之谜157
	第9章 更多库之谜183
	第10章 高级谜题209

【读书体会】：
	在没有读这本书之前，觉得用Java编写程序很舒服，思路十分清晰。但是读完这本书之后，才发现Java世界没有想象的那么好，你随时都有可能掉某些进陷阱之中。这些陷阱有可能是自己的粗心大意造成（如谜题95的第一个小题），有可能是对数字边界问题考虑欠佳造成的，还有可能是对于Java的一些基本概念没有理解清楚造成的。另外，序列化，多线程、泛型以及继承这些地区都是事故的多发地带。在阅读完这本书后，你在编写程序和阅读别人的程序时会考虑的更多些。 
	另外，这本书的内容是以一个一个谜题的形式组织而成的，一般一个谜题一道两页，而且谜题之间的相关性不是很大，不需要按照某一顺序去看。所以这本书十分适合随意式的阅读。中文翻译总体感觉还可以，但是如果看英文版我觉得乐趣可能会更大一些：）
　	作者在preface中郑重建议： 
　　大家先思考自己的答案，然后运行代码看真实答案，一般来说，你想的和程序运行结果是不会相同的，而且程序结果往往会让你百思不得其解。这正是这本书的魅力所在。 
　　这些puzzler中的一部分是我们写程序的时候经常会遇到的，可能你已经不知不觉中克服了，重新读这本书，会让你重新思考这些pitfall。还有一些puzzler是我们基本上没有遇到的，读了也起到了很好的开阔视野的作用。 
　　总之，这本书给我的感觉是非常有趣，太值得一读了！ 