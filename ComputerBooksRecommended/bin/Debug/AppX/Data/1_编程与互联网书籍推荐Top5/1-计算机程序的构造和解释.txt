【推荐理由】：
	这一版本中强调了几个新问题，其中最重要的是有关的不同的途径中，计算模型里对于时间的处理所起的中心作用：带有状态的对象、并发程序设计、函数式程序设计、惰性求值和非确定性程序设计。这里为并发和非确定性新增加了几节，我们也设法将这一论题集成到整本书里，贯穿始终。每一位严肃的计算机科学家都应该阅读这本书。由于本书清晰、简洁和富于才智，我们强烈推荐本书，它适合所有希望深刻理解计算机科学的人们。 

【作者简介】：
	Harold Abelson是MIT1992年度MacVicarFacultyFellow。Gerald JaySussman是Matsushita电子工程教授。他们都在MIT电子工程和计算机科学系工作．都得到过最重要的计算机科学教育奖：如Abelson得到了IEEE计算机学会的Booth奖。Sussman得到了ACM的Karlstrom奖。
	Julie Sussman是作家和编辑，同时使用自然语言和计算机语言写作。

【书籍介绍】：
	本书按照内容可以分为三个部分：过程抽象（第一章）；数据抽象（第二、三章）和语言抽象（第四、五章）。 
　　过程抽象部分比较简单，先介绍了Scheme的基本语法，让读者初步领略函数式编程的风采。对于有一定编程基础（相信国内极少有人入门就读这个）的读者来说，会有耳目一新的感觉，原来递归和迭代可以有另一种表现形式，但并不难理解。习题也比较简单，不会用掉太多的时间。过程抽象的概念也很简单，就是编程语言中的函数，目的是封装计算过程的细节。关于何时应该用过程抽象的原则是：一切可以定义为过程的计算片段都应该定义为过程。 
　　数据抽象是我认为的本书的核心，也是最值得我们仔细研读的部分。关于数据抽象最直接的理解就是面向对象编程，如C++，而Java和C#则是更彻底的数据抽象。把一组过程抽象（类的方法）集中考虑，并加入内部状态（类的变量），就是一个数据抽象。每个数据抽象都应该把自己的内部对象状态和对象的实现隐藏起来，对外通过一组接口进行消息传递。这样听起来好像本书与一般的面向对象书没有区别，但实际上，这些都是我自己的总结，书里面不会把这些概念直接罗列出来，而是通过一个个巧妙的例子，让读者一步步深入，感叹原来A还可以这样抽象，原来B还可以这样封装。个人认为如果时间有限，读完前三章已经可以领会本书大部分思想了，后两章可以不读。 
　　语言抽象是指自己发明一门语言，以解决某一特定应用领域的问题。在这一领域中，自己发明的语言会比其他通用语言更方便。定义了新语言的语法后，就要自己去实现该语言的编译器或解释器，可以通过现有的语言去构造。这一部分包含了许多编译方面的知识，但又与编译原理中的构造方法有不少区别，自己看书很容易看得云里雾里，听老师讲课才好一些。大部分习题很难做，一部分习题非常难。 
	第1章 构造过程抽象
	1.1 程序设计的基本元素
	1.2 过程与它们所产生的计算
	1.3 用高阶函数做抽象
	第2章 构造数据现象
	2.1 数据抽象导引
	2.2 层次性数据和闭包性质
	2.3 符号数据
	2.4 抽象数据的多重表示
	2.5 带有通用型操作的系统
	第3章 模块化、对象和状态
	3.1 赋值和局部状态
	3.2 求值的环境模型
	3.3 用变动数据做模拟
	3.4 并发：时间是一个本质问题
	3.5 流
	第4章 元语言抽象
	4.1 元循环求值器
	4.2 Scheme的变形——惰性求值
	4.3 Scheme的变形——非确定性计算
	4.4 逻辑程序设计
	第5章 寄存器机器里的计算
	5.1 寄存器机器的设计
	5.2 一个寄存器机器模拟器
	5.3 存储分配和废料收集
	5.4 显式控制的求值器
	5.5 编译

【读书体会】：
　　这本书广而不深，讨论到了非常多重要的思想，有些甚至冷不丁出现在注释里（比如Y算子）。内容安排很照顾初学者，循循善诱；语言直白简单；代码大多简明自然。 